// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let verifier = artifacts.require('SquareVerifier');
let proof = require('../../zokrates/code/square/proof.json');

contract('TestVerifier', accounts => {

    const account_one = accounts[0];

    describe('test verification with correct proof', function () {
        beforeEach(async function () {
            this.contract = await verifier.new({ from: account_one });
        })
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('verification with correct proof', async function () {
            let verified = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs, { from: account_one });
            assert.equal(verified, true, "verification is valid");
        })

        // Test verification with incorrect proof
        it('verification with incorrect proof', async function () {
            let inputs = [ '0x0000000000000000000000000000000000000000000000000000000000000009',
                           '0x0000000000000000000000000000000000000000000000000000000000000009' ];
            let verified = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, inputs, { from: account_one });
            assert.equal(verified, false, "verification is valid");
        })
    })
});